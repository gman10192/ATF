//STATE MANAGER
//Determine if requested state to transition into is allowed
//Based on PackML v3.0 Mode & States document.

//**NOTE**
//Only code to verify it is approrpriate to transition to requested state should be here.  
//Actual actions and machine operation will be handled by state modules: functions for the corresponding state (i.e. stateStarting, stateResetting, etc.)
//Any faults generated by an attempt to transition from one state to another should be handled in the individual state modules.

void transitionTo(byte requestedState)
{
	switch (requestedState) {
	
	case IDLE:
		if (gPreviousState == RESETTING && gResetComplete == TRUE) {
			gPreviousState = gCurrentState;
			gCurrentState = IDLE;
			genie.WriteObject(GENIE_OBJ_STRINGS, 0, IDLE);  
			gResetComplete = FALSE;
		}
		else {
			gFault = TRUE;
			gFaultMessage = 6;  //Unable to enter requested IDLE state
		}
		break;
	
	case STARTING:
		if (gCurrentState == IDLE) {
			gPreviousState = gCurrentState;
			gCurrentState = STARTING;
			genie.WriteObject(GENIE_OBJ_STRINGS, 0, STARTING);
			stateStarting();
		}
		else
			gCurrentState = gCurrentState;
		break;
	
	case EXECUTE:
		
		break;
	
	case COMPLETING:
		//Do whatever for scenario
		break;
	
	case COMPLETE:
		//Do whatever for scenario
		break;
	
	case HOLDING:
		//Do whatever for scenario
		break;
	
	case HELD:
		//Do whatever for scenario
		break;
	
	case UNHOLDING:
		if (gCurrentState == STARTING) {
			break;
		}
		else if () {

		}
		break;
	
	case SUSPENDING:
		//Do whatever for scenario
		break;
	
	case SUSPENDED:
		//Do whatever for scenario
		break;
	
	case UNSUSPENDING:
		//Do whatever for scenario
		break;
	
	case RESETTING:
		if (gCurrentState == MANUAL_MODE || gCurrentState == CONFIGURATION || gCurrentState == STOPPED) { 
			gPreviousState = gCurrentState;
			gCurrentState = RESETTING;
			genie.WriteObject(GENIE_OBJ_STRINGS, 0, RESETTING);
			stateResetting();
		}
		else {
			gFault = TRUE;
			gFaultMessage = 7;  //Unable to enter requested RESETTING state
		}
		break;
	
	case STOPPED:
		//Do whatever for scenario
		break;
	
	case STOPPING:
		//Do whatever for scenario
		break;
	
	case CLEARING:
		//Do whatever for scenario
		break;
	
	case ABORTED:
		//Do whatever for scenario
		break;
	
	case ABORTING:
		//Do whatever for scenario
		break;
	
	case CONFIGURATION:  //Enter Settings screen
		if (gCurrentState == IDLE) {
			genie.WriteObject(GENIE_OBJ_FORM, 3, 0);  //Activate Settings screen on the display
			gCurrentState = CONFIGURATION;
			genie.WriteObject(GENIE_OBJ_STRINGS, 0, CONFIGURATION);
		}
		break;
	
	case MANUAL_MODE:
		if (gCurrentState == IDLE) {
			genie.WriteObject(GENIE_OBJ_FORM, 4, 0);  //Activate manual mode screen on the display
			gCurrentState = MANUAL_MODE;
			genie.WriteObject(GENIE_OBJ_STRINGS, 0, MANUAL_MODE);
		}
		break;
	
	case FAULTED:  //Not sure if I need this state in here or not...
		//??
		break;
	
	default:
		gFaultMessage = 5;
		gCurrentState = FAULTED;
		break;
	}
}

//byte scenario = 0;

//if (gCurrentState == IDLE && gRequestedState == STARTING) scenario = 1;  //Start PB
//if (gCurrentState == RESETTING && gRequestedState == IDLE) scenario = 2;
//if (gCurrentState == STOPPED && gRequestedState == RESETTING) scenario = 3;  //Reset PB
//if (gCurrentState == STOPPING && gRequestedState == STOPPED) scenario = 4;
//if (gCurrentState == CLEARING && gRequestedState == STOPPED) scenario = 5;
//if (gCurrentState == ABORTED && gRequestedState == CLEARING) scenario = 6;
//if (gCurrentState == ABORTING && gRequestedState == ABORTED) scenario = 7;
//if (gCurrentState == STARTING && gRequestedState == EXECUTE) scenario = 8;
//if (gCurrentState == EXECUTE && gRequestedState == COMPLETING) scenario = 9;
//if (gCurrentState == COMPLETING && gRequestedState == COMPLETE) scenario = 10;
//if (gCurrentState == EXECUTE && gRequestedState == HOLDING) scenario = 11;  //Hold PB
//if (gCurrentState == HOLDING && gRequestedState == HELD) scenario = 12;
//if (gCurrentState == HELD && gRequestedState == UNHOLDING) scenario = 13;  //Resume PB
//if (gCurrentState == UNHOLDING && gRequestedState == EXECUTE) scenario = 14;
//if (gCurrentState == EXECUTE && gRequestedState == SUSPENDING) scenario = 15;  //Suspend PB
//if (gCurrentState == SUSPENDING && gRequestedState == SUSPENDED) scenario = 16;
//if (gCurrentState == SUSPENDED && gRequestedState == UNSUSPENDING) scenario = 17;  //Resume PB
//if (gCurrentState == UNSUSPENDING && gRequestedState == EXECUTE) scenario = 18;
//if ((gCurrentState >= 1 && gCurrentState <= 12) && gRequestedState == STOPPING) scenario = 19; //Stop PB
//if ((gCurrentState >= 1 && gCurrentState <= 15) && gRequestedState == ABORTING) scenario = 20;  //Abort PB
//if (gCurrentState == IDLE && gRequestedState == CONFIGURATION) scenario = 21;  //Configure Mode
//if (gCurrentState == CONFIGURATION && gRequestedState == RESETTING) scenario = 22;  //Reset PB
//if (gCurrentState == IDLE && gRequestedState == MANUAL_MODE) scenario = 23;  //Manual Mode
//if (gCurrentState == MANUAL_MODE && gRequestedState == RESETTING) scenario = 24; //Reset PB